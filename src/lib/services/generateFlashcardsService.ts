import type {
  GenerateFlashcardsCommand,
  GenerateFlashcardsResponseDTO,
  GenerationDTO,
  FlashcardDTO,
} from "../../types";
import { supabaseClient } from "../../db/supabase.client";

export async function generateFlashcards(
  command: GenerateFlashcardsCommand,
  user: { id: string }
): Promise<GenerateFlashcardsResponseDTO> {
  // Comment: Rate limiting is skipped for now.
  // Comment: Supabase authentication integration is not implemented; we focus on data persistence.

  // Simulate external AI service call by returning dummy flashcards data (without IDs)
  const dummyFlashcardsData = [
    {
      user_id: user.id,
      front_text: "Front text example 1",
      back_text: "Back text example 1",
      rating: null,
      source: "auto",
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    },
    {
      user_id: user.id,
      front_text: "Front text example 2",
      back_text: "Back text example 2",
      rating: null,
      source: "auto",
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    },
  ];

  // Create a generation record (without ID - it will be generated by the database)
  const generationData = {
    user_id: user.id,
    model: "stub-model",
    generation_count: dummyFlashcardsData.length,
    created_at: new Date().toISOString(),
    source_text_hash: "dummyhash", // In production, compute a hash of command.text
    source_text_length: command.text.length,
  };

  // Persist generation record into the database
  const { data: insertedGeneration, error: generationError } = await supabaseClient
    .from("generations")
    .insert(generationData)
    .select()
    .single();

  if (generationError || !insertedGeneration) {
    throw new Error("Failed to insert generation: " + (generationError?.message || "No generation returned"));
  }

  // Prepare flashcards with the database-generated generation id
  const flashcardsToInsert = dummyFlashcardsData.map((fc) => ({
    ...fc,
    generation_id: insertedGeneration.id,
  }));

  // Persist flashcards into the database
  const { data: insertedFlashcards, error: flashcardsError } = await supabaseClient
    .from("flashcards")
    .insert(flashcardsToInsert)
    .select();

  if (flashcardsError || !insertedFlashcards) {
    throw new Error("Failed to insert flashcards: " + (flashcardsError?.message || "No flashcards returned"));
  }

  return {
    generation: insertedGeneration as GenerationDTO,
    flashcards: insertedFlashcards as FlashcardDTO[],
  };
}
